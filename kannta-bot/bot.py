import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo
)
from aiogram.client.default import DefaultBotProperties

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_TOKEN = '7731287979:AAEEeOHdo1tIIa_b0oIb9qNwoQ9ZjJsz1Cc'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
GROUP_CHAT_ID = -1002841459949  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ)
WEB_APP_URL = 'https://doswstds.github.io/kataanse/'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

USERS_FILE = "use12121rs.json"

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)

# === –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è /start ===
@dp.message(CommandStart())
async def start(message: types.Message):
    users = load_users()
    user_id = str(message.from_user.id)

    if user_id in users:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤–µ–±-–∞–ø–ø
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
        ])
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=keyboard)
    else:
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    contact = message.contact
    user_id = str(message.from_user.id)

    users = load_users()
    users[user_id] = {
        "phone_number": contact.phone_number,
        "username": message.from_user.username
    }
    save_users(users)

    # –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", reply_markup=ReplyKeyboardRemove())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    try:
        await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üì± –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: @{message.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}"
        )
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

    # –ö–Ω–æ–ø–∫–∞ –≤–µ–±-–∞–ø–ø–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
